//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Defines entity classes specific to Virtual Reality Mod
//
//==================================================================================================

@include "base.fgd"
@include "lights.fgd"
@include "lights2.fgd"
@include "markup_volumes.fgd"
@include "postprocessing.fgd"

//--------------------------------------------------------------------------------------------------
// Entity groups. This list specifies which entity groups will show up in the entity tool and in what
// order. If an entity specifies a group that is not in this list it will not be displayed in the tool.
// This allows the mod specific fgd to control the ui.
//--------------------------------------------------------------------------------------------------
@EntityGroup "Player" { start_expanded = true }
@EntityGroup "Lighting" { start_expanded = true }
@EntityGroup "Fog & Sky" { start_expanded = true }
@EntityGroup "Content" { start_expanded = true }



//--------------------------------------------------------------------------------------------------
// Auto vis group filters.
//--------------------------------------------------------------------------------------------------
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_concrete.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_plastic.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_wood_basket.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_gravel.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_wood.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_metal.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_metalvehicle.vmat"		group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_metal_sand_barrel.vmat"	group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_wood_crate.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_rubbertire.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_sand.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_concrete.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_dirt.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_glass.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_metalgrate.vmat"			group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_rubber.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsclip_plastic.vmat"				group = "Clip"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "tools_cs_place.vmat"				group =	"Place"		parent_group = "Tool Brushes" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsgrenadeclip.vmat"				group =	"Grenades"	parent_group = "Clip" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsblockbullets_cs.vmat"			group =	"Bullets"	parent_group = "Clip" }
@VisGroupFilter { filter_type = "toolsMaterial"		material = "toolsinvisibleladder_wood.vmat"		group =	"Ladder"		parent_group = "Tool Brushes" }

@VisGroupFilter { filter_type = "entityTag"		tag = "Camera"		group = "Camera"			parent_group = "Entities" }



//--------------------------------------------------------------------------------------------------
// Excludes
//--------------------------------------------------------------------------------------------------

//Exclude this since we want to remove some defunct parameters. Only way to do this currently is to exclude and redefine
@exclude env_sky 
@exclude func_illusionary
@exclude light_ortho
@exclude light_spot
@exclude light_omni
@exclude light_dynamic
@exclude beam_spotlight
@exclude color_correction
@exclude env_beam
@exclude env_beverage
@exclude env_cubemap
@exclude env_funnel
@exclude env_instructor_vr_hint
@exclude env_laser
@exclude env_lightglow
@exclude env_projectedtexture
@exclude env_rotorshooter
@exclude env_rotorwash_emitter
@exclude env_screenoverlay
@exclude env_smokestack
@exclude env_smoketrail
@exclude env_sprite
@exclude env_splash
@exclude env_sprite_oriented
@exclude env_sun
@exclude env_texturetoggle
@exclude env_tonemap_controller
@exclude env_wind_clientside
@exclude func_fish_pool
@exclude func_instance
@exclude func_orator
@exclude haptic_relay
@exclude info_ladder_dismount
@exclude info_landmark
@exclude info_lighting
@exclude postprocess_controller
@exclude color_correction_volume
@exclude env_bubbles
@exclude fog_volume
@exclude func_detail_blocker
@exclude func_precipitation
@exclude func_precipitation_blocker
@exclude func_reflective_glass
@exclude func_shatterglass
@exclude func_wall
@exclude func_wall_toggle
@exclude trigger_tonemap 
//Exclude Counter-Strike bullshit

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------

// Add an override of player start inoder to add it to the ui
@OverrideClass 
	metadata
	{
		entity_tool_name = "Player Start"
		entity_tool_group = "Player"
		entity_tool_tip = "Entity which specifies where the player will start."
	}
= info_player_start :
[
]

@OverrideClass base(Targetname, Parentname) tags( Lighting ) = light_base
[
	// Remove these until we have a need for them to avoid cluttering up the UI for light ents
	nearclipplane(remove_key)
	fademindist(remove_key) 
	fademaxdist(remove_key) 
	range(remove_key) 
]

@OverrideClass = light_base_legacy_params
[
//	rendertransmissive(remove_key)
//	renderspecular(remove_key)
//	renderdiffuse(remove_key)
//	indirectlight(remove_key)
]

@PointClass   editormodel("models/editor/camera.vmdl", fixedbounds) = csm_fov_override :
	"This entity indicates the FOV override for cascading shadow maps.   ."
[
	camera_name(target_destination) : "Target Camera Name" : "default" : "Select a camera name to override a specific camera's CSM FOV.  Target 'default' applies to all cameras not otherwise specified."
	csm_fov_override(float) : "CSM FOV Override value" : "75" : "This value will be used to override the FOV for cascading shadow maps only.  Actual camera FOV remains unchanged."
]


@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	baked_light_index_min(integer) : "Baked Light Minimum Index" : "0" : "Baked lights in this map will not have a value smaller than this number. Use to avoid conflicts in dynamically loaded prefabs."
	baked_light_index_max(integer) : "Baked Light Maximum Index" : "256" : "Baked lights in this map will not have a value equal to or larger than this number. Use to avoid conflicts in dynamically loaded prefabs."
	max_lightmap_resolution(choices) : "Maximum Lightmap Resolution" : "0" =
	[
		"0" : "No Maximum"
		"512" : "512"
		"1024" : "1024"
		"2048" : "2048"
		"4096" : "4096"
		"8192" : "8192"
		"16384" : "16384"
		"32768" : "32768"
	]
	lightmap_queries(boolean) : "Lightmap Queries" : "1" : "Generates data which can be used to lookup lightmap UVs at a given position, useful for high-fidelity illumination of bullet decals on lightmapped geometry."

	steamaudio_reverb_rebake_option(choices) [ group="Steam Audio Reverb Settings" ]: "Rebake Option" : "1" : "<b>Cleanup</b>: Reverb bake is disabled. Baked data will be cleaned up during map compile in Hammer or mapbuilder.<br /><b>Manual</b>: Reverb needs to be baked manually. Baked data is added or updated during map compile in Hammer but untouched by mapbuilder.<br /><b>Auto</b>: Reverb is baked automatically during map compile. Baked data is added or updated during map compile in Hammer or mapbuilder." =
	[
		"0" : "Cleanup"
		"1" : "Manual"
		"2" : "Auto"
	]
		steamaudio_reverb_grid_type(choices) [ group="Steam Audio Reverb Settings" ]: "Grid Type" : "0" : "<b>Uniform Floor</b>: Places probes at a specified height above the floor with a specified horizontal spacing between probes. <br /><b>Manual Grid</b>: Use manually generated probes in the map.<br /><b>NavMesh Grid</b>: Places probes at a specified height above the NavMesh with a specified horizontal spacing between probes." =
	[
		"0" : "Uniform Floor"
		"1" : "Manual Grid"
		"2" : "NavMesh Grid"
	]

	steamaudio_reverb_grid_spacing(float) [ group="Steam Audio Reverb Settings" ]: "Grid Spacing" : "6" : "The horizontal distance (in meters) between adjacent probes."
	steamaudio_reverb_height_above_floor(float) [ group="Steam Audio Reverb Settings" ]: "Height Above Floor" : "1.5" : "The height (in meters) above the floor at which probes should be placed.."
	steamaudio_reverb_rays(integer) [ group="Steam Audio Reverb Settings" ]: "Baking Rays" : "32768" : "The number of rays traced from the listener when baking reflections or reverb. Increasing this value results in more accurate reflections, at the cost of increased bake times."
	steamaudio_reverb_bounces(integer) [ group="Steam Audio Reverb Settings" ]: "Baking Bounces" : "32" : "The number of times each ray traced from the listener is reflected when baking reflections or reverb. Increasing this value results in longer, more accurate reverb tails, at the cost of increased bake times."
	steamaudio_reverb_ir_duration(float) [ group="Steam Audio Reverb Settings" ]: "Baking Duration" : "1.0" : "The duration (in seconds) of the IRs generated when baking reflections or reverb. Increasing this value results in longer, more accurate reverb tails, at the cost of increased disk space usage."
	steamaudio_reverb_ambisonic_order(integer) [ group="Steam Audio Reverb Settings" ]: "Baking Ambisonic Order" : "1" : "The Ambisonic order of the IRs generated when baking reflections or reverb. Increasing this value results in more accurate directional variation of reflected sound, at the cost of increased disk space usage."

	steamaudio_pathing_rebake_option(choices) [ group="Steam Audio Pathing Settings" ]: "Rebake Option" : "1" : "<b>Cleanup</b>: Pathing bake is disabled. Baked data will be cleaned up during map compile in Hammer or mapbuilder.<br /><b>Manual</b>: Pathing needs to be baked manually. Baked data is added or updated during map compile in Hammer but untouched by mapbuilder.<br /><b>Auto</b>: Pathing is baked automatically during map compile. Baked data is added or updated during map compile in Hammer or mapbuilder." =
	[
		"0" : "Cleanup"
		"1" : "Manual"
		"2" : "Auto"
	]
	steamaudio_pathing_grid_type(choices) [ group="Steam Audio Pathing Settings" ]: "Grid Type" : "0" : "<b>Uniform Floor</b>: Places probes at a specified height above the floor with a specified horizontal spacing between probes. <br /><b>Manual Grid</b>: Use manually generated probes in the map.<br /><b>NavMesh Grid</b>: Places probes at a specified height above the NavMesh with a specified horizontal spacing between probes." =
	[
		"0" : "Uniform Floor"
		"1" : "Manual Grid"
		"2" : "NavMesh Grid"
	]
	steamaudio_pathing_grid_spacing(float) [ group="Steam Audio Pathing Settings" ]: "Grid Spacing" : "6" : "The horizontal distance (in meters) between adjacent probes."
	steamaudio_pathing_height_above_floor(float) [ group="Steam Audio Pathing Settings" ]: "Height Above Floor" : "1.5" : "The height (in meters) above the floor at which probes should be placed.."
	steamaudio_pathing_visibility_samples(integer) [ group="Steam Audio Pathing Settings" ]: "Baking Visibilty Samples" : "1" : "Number of point samples to use around each probe when testing whether one probe can see another. To determine if two probes are mutually visible, rays are traced from each point sample of the first probe, to every other point sample of the second probe. Increasing this value prevents paths from being considered occluded by small objects, at the cost of increased bake times."
	steamaudio_pathing_visibility_radius(float) [ group="Steam Audio Pathing Settings" ]: "Baking Visibility Radius" : "0.0" : "When testing for mutual visibility between a pair of probes, each probe is treated as a sphere of this radius (in meters), and point samples are generated within this sphere."
	steamaudio_pathing_visibility_threshold(float) [ group="Steam Audio Pathing Settings" ]: "Baking Visibility Threshold" : "0.1" : "When tracing rays to test for mutual visibility between a pair of probes, the fraction of rays that are unoccluded must be greater than this threshold for the pair of probes to be considered mutually visible."
	steamaudio_pathing_visibility_pathrange(float) [ group="Steam Audio Pathing Settings" ]: "Baking Path Range" : "100.0" : "If the distance (in meters) between two probes is greater than this value, the probes are considered to not have any path between them. Increasing this value allows sound to propagate over greater distances, at the cost of increased bake times and memory usage."
]

@BaseClass = Angles
[ 
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "This entity's orientation in the world. Pitch is rotation around the Y axis, " +
		"yaw is the rotation around the Z axis, roll is the rotation around the X axis."
]

@BaseClass = TeamNum
[
	TeamNum(choices) : "Team Number (int)" : 0 =
	[
		-1 : "None"
		0 : "All Teams"
		2 : "Terrorist"
		3 : "Counter-Terrorist"
	]
	input SetTeam(integer) : "Changes the entity's team"
]

//-------------------------------------------------------------------------
//
// Point Classes
//
//-------------------------------------------------------------------------


@PointClass base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_cubemap_fog.vmat" ) 
	cubemap_fog()
	metadata
	{
		entity_tool_name = "Cubemap fog"
		entity_tool_tip = "Specifies fog based on an env_sky or skybox material."
		entity_tool_group = "Fog & Sky"
	}
= env_cubemap_fog  
[
	cubemapfogsource(Choices) [ group = "Fog Cubemap" ] : "Cubemap Source" : "1" : "Which field to use to select the cubemap and its parameters." =
	[
		1 : "Cubemap From Env_Sky"
		2 : "Cubemap From Material"
	]
	cubemapfogskyentity(target_destination) { group="Fog Cubemap" enabled={ variable="cubemapfogsource" value="1" } } : "Env_Sky Target"
	cubemapfogskymaterial(resource:material) { group="Fog Cubemap" enabled={ variable="cubemapfogsource" value="2" } } :  "Sky Material"
	cubemapfoglodbiase(float) [ group = "Fog Cubemap" ] : "Cubemap Blur / Mip Bias (0-1)" : "0.5" : "Adjust how blurry the cubemap should be. Lower values are more blurry (0-1) "
	cubemapfogstartdistance(float) [ group = "Fog Distance" ] : "Fog Start Distance" : "0.0"
	cubemapfogenddistance(float) [ group = "Fog Distance" ] : "Fog End Distance" : "4000.0"
	cubemapfogfalloffexponent(float) [ group = "Fog Distance" ] : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff. For example, 2.0 = proportional to square of distance"
	cubemapfogmaxopacity(float) [ group = "Fog Distance" ] : "Maximum Fog Opacity (0-1)" : "1.0" : "Set the maximum opacity of the cubemap fog. (0-1)"
	cubemapheightfog(boolean) [ group = "Fog Height" ] : "Height Fog Enabled?" : 1
	cubemapfogheightstart(float) [ group = "Fog Height" ] : "Height Fog Start" : "0.0"
	cubemapfogheightend(float) [ group = "Fog Height" ] : "Height Fog End" : "4000.0"
	cubemapfogheightexponent(float) [ group = "Fog Height" ] : "Height Fog Exponent" : "2.0" : "Exponent for distance falloff. For example, 2.0 = proportional to square of distance"
]

@PointClass  base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_fog_controller.vmat" )
	gradientfog()
	global( gradient_fog )
	metadata
	{
		entity_tool_name = "Gradient Fog"
		entity_tool_tip = "Specifies fog based on a color gradient"
		entity_tool_group = "Fog & Sky"
	}
= env_gradient_fog
[
	// Fog Color
	fogcolor(color255) [ group = "Fog Color" ] : "Fog Color" : "255 255 255" : "Set the gradient fog color."
	fogstrength(float) [ group = "Fog Color" ] : "Fog Color Multiplier" : "1.0" : "For HDR color values"	
	fogmaxopacity(float) [ group = "Fog Color" ] : "Fog Maximum Opacity" : "1.0" : "Set the maximum opacity of the gradient fog."

	// Fog Distance
	fogstart(float) [ group = "Fog Distance" ] : "Fog Start Distance" : "0.0"
	fogend(float) [ group = "Fog Distance" ] : "Fog End Distance" : "4000.0"
	fogfalloffexponent(float) [ group = "Fog Distance" ] : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff."

	// Fog Height
	heightfog(boolean) [ group = "Fog Height" ] : "Height Fog Enabled?" : 1
	fogstartheight(float) [ group = "Fog Height" ] : "Fog Start Height" : "0.0"
	fogendheight(float) [ group = "Fog Height" ] : "Fog End Height" : "4000.0"
	fogverticalexponent(float) [ group = "Fog Height" ] : "Height Falloff Exponent" : "2.0" : "Exponent for height falloff."

	// Render Properties
	fadetime(float) [ group = "Render Properties" ] : "Fade Time" : "1.0" : "How much time it takes to fade in new values."
	farz(float) [ group = "Render Properties" ] : "Far Z Clip Plane" : "-1.0" : "Controls the Far Z distance clipping plane, beyond which geometry will be culled."

	input SetFogStartDistance(float) : "Set Fog Start Distance"
	input SetFogEndDistance(float) : "Set Fog End Distance"
	input SetFogStartHeight(float) : "Set Fog Start Height"
	input SetFogEndHeight(float) : "Set Fog End Height"
	input SetFogMaxOpacity(float) : "Set Fog Max Opacity"
	input SetFogFalloffExponent(float) : "Set Fog Falloff Exponent"
	input SetFogVerticalExponent(float) : "Set Fog Vertical Exponent"
	input SetFogColor(color255) : "Set Fog Color"
	input SetFogStrength(float) : "Set Fog Strength"
	input SetFarZ(float): "Set the far clip plane distance."
]

@PointClass  base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_player_visibility.vmat" )
	player_visibility()
	global( player_visibility )
	metadata
	{
		entity_tool_name = "Player Visibility"
		entity_tool_tip = "Player visibility settings for fog and postprocessing"
		entity_tool_group = "Fog & Sky"
	}
= env_player_visibility
[
	playervisibilitystrength(float) : "Player Visibility Postprocessing Strength" : "1.1" : "Set the strength of the player visibility postprocessing effect"
	playerfogdistancemultiplier(float) : "Player Fog Distance Multiplier" : "1.7" : "Set a multiplier on the distance used to calculate fog for players. Higher values mean the fog is pushed further away."
	playerfogmaxdensitymultiplier(float) : "Player Fog Max Density Multiplier" : "0.6" : "Set a multiplier on the maximum density of fog for players. Lower values mean less opaque fog."
	fadetime(float) : "Fade Time" : "1.0" : "How much time it takes to fade in new values."
	
	input SetPlayerVisibilityStrength(float) : "Set Player Visibility Postprocessing Strength"
	input SetPlayerFogDistanceMultiplier(float) : "Set Player Fog Distance Multiplier"
	input SetPlayerFogMaxDensityMultiplier(float) : "Set Player Fog Max Density Multiplier"
]

@PointClass base(Targetname, Parentname, EnableDisable) iconsprite("editor/env_sky.vmat") skybox() 
	metadata
	{
	entity_tool_name = "Skybox"
	entity_tool_group = "Fog & Sky"
	entity_tool_tip = "Adds a 2D skybox"
	}
= env_sky : 
	"Controls the 2D skybox material. Rotation of this entity rotates the skybox material"
[
	skyname(resource:material) [report] : "Skybox Material" : "materials/dev/default_sky.vmat"
	tint_color(color255) : "Sky Tint Color" : "255 255 255" : "Tint the skybox"
	brightnessscale(float) : "Brightness Scale" : "1.0" : "Scale brightness by this amount" 

//	fog_type(choices) : "Fog Type" : 1 =
//	[
//		0: "None"
//		1: "Distance Based"
//		2: "Angular"
//	]
//
//	angular_fog_max_end( float ) : "Fog Max Angle End" : "35.0"
//	angular_fog_max_start( float ) : "Fog Max Angle Start" : "25.0"
//	angular_fog_min_start( float ) : "Fog Min Angle Start" : "-25.0"
//	angular_fog_min_end( float ) : "Fog Min Angle End" : "-35.0"
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = env_hudhint : 
	"An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command."
[
	message(string) : "Hint Text (localized)" : "" : "This should be set to match the desired HUD hint entry in the hl2\resource\valve_english.txt."

	// Inputs
	input ShowHudHint(void) : "Shows the hint message."
	input HideHudHint(void) : "Hides the hint message."
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Environment Light"
		entity_tool_group = "Lighting"
		entity_tool_tip = "For sunlight and sky lighting"
		default_pitch = 45.0
		default_yaw = 45.0
	}
= light_environment
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Remove dynamic light option
	directlight(choices) [ group="Direct Light" ] : "Direct Lighting Type" : "3" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Stationary"
	]

	// NOTE - this currently has no effect for light_environment, TODO add this to lighting so we can have 
	// reduced CSM distances and still keep the shadow from the sun/light_environment
	baked_light_indexing(boolean) [ group = "Shadows" ] : "Stationary Light Shadows" : "1" : "Allows mixed dynamic cascade shadow maps with Baked shadows." 
	
	// These are controlled instead by ConVars in settings in CSGO that vary based on global shadow settings, 
	// so don't expose it to artists since it won't work


	// These don't really need to be exposed, defauls work fine 99% of time
	
	// Hacks
	minroughness(float) { group="Specular" min="0.0" max="1.0" } : "Specular Softness" : "0" : "USE WITH CAUTION: Artificially softens direct specular (not cubemaps) to simulate cheap, soft area lights. Note: Direct Lighting must be set to Stationary or Dynamic for this to have an effect."
	
]

@OverrideClass = light_barn
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

    castshadows(choices) [ group = "Shadows" ] : "Cast Shadows" : "2" : "Whether this light casts shadow" =
	[
		"0" : "No"
		"1" : "Baked & Dynamic"
		"2" : "Baked Only"
	]
	directlight(choices) { group="Direct Light" } : "Direct Lighting Type" : "1" : "How direct lighting should be represented: Static=Fully baked into lightmap (cheapest), Stationary=Dynamic direct light with baked shadows, Dynamic=Fully dynamic (Most expensive)" =
	[
		// Ordered by expensiveness
		"0" : "None"
		"1" : "Static"
		"3" : "Stationary"
		"2" : "Dynamic"
	]
]

@OverrideClass = light_rect
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

    castshadows(choices) [ group = "Shadows" ] : "Cast Shadows" : "2" : "Whether this light casts shadow" =
	[
		"0" : "No"
		"1" : "Baked & Dynamic"
		"2" : "Baked Only"
	]
	directlight(choices) { group="Direct Light" } : "Direct Lighting Type" : "1" : "How direct lighting should be represented: Static=Fully baked into lightmap (cheapest), Stationary=Dynamic direct light with baked shadows, Dynamic=Fully dynamic (Most expensive)" =
	[
		// Ordered by expensiveness
		"0" : "None"
		"1" : "Static"
		// "3" : "Stationary"
		// "2" : "Dynamic"
	]

]

@OverrideClass = light_omni2
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	castshadows(choices) [ group = "Shadows" ] : "Cast Shadows" : "2" : "Whether this light casts shadow. " =
	[
		"0" : "No"
		"1" : "Baked & Dynamic"
		"2" : "Baked Only"
	]
	directlight(choices) { group="Direct Light" }: "Direct Lighting Type" : "1" : "How direct lighting should be represented: Static=Fully baked into lightmap (cheapest), Stationary=Dynamic direct light with baked shadows, Dynamic=Fully dynamic (Most expensive). NOTE: Stationary and Dynamic omni2's take up 6 dynamic shadow slots, and will likely not cast shadows if you have CSM shadows enabled in a light_environment." =
	[
		// Ordered by expensiveness
		"0" : "None"
		"1" : "Static"
		"3" : "Stationary"
		"2" : "Dynamic"
	]	
]

@OverrideClass = sky_camera
[
	clip_3D_skybox_near_to_world_far(remove_key)
	clip_3D_skybox_near_to_world_far_offset(remove_key)
	SkyboxSlot(remove_key)
	fogenable(remove_key)
	fogblend(remove_key)
	use_angles(remove_key)
	fogcolor(remove_key)
	fogcolor2(remove_key)
	fogdir(remove_key)
	fogstart(remove_key)
	fogend(remove_key)
	fogmaxdensity(remove_key)
	HDRColorScale(remove_key)
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Cubemap"
		entity_tool_tip = "Defines a cube map location."
		entity_tool_group = "Lighting"
	}
= env_cubemap_box
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	edge_fade_dists(vector) : "Edge Fade Dist" : "0 0 0"
]

@OverrideClass = BaseLightProbeVolume
[
	lightprobetexture(remove_key)
	light_probe_volume_from_cubemap(remove_key) 
	moveable(remove_key) 
	storage(remove_key) 
]

@OverrideClass = BaseCubemap
[
	moveable(remove_key) 
	bakenearz(remove_key)
]

@OverrideClass 
	metadata
	{
		entity_tool_name = "Combined Cubemap and Light Probe volume"
		entity_tool_group = "Lighting"
		entity_tool_tip = "Combined box-projected cubemap for reflections and a light probe volume for dynamic objects"
	}
= env_combined_light_probe_volume
[
	clientSideEntity(choices) [ group="Misc" ] : "Create Client-Only Entity" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	voxel_size(choices) [ group="Lightprobes" ] : "Voxel Size" : "48.0" : "" = 
	[
		"6.0" : "Very Very High Resolution"
		"12.0" : "Very High Resolution"
		"24.0" : "High Resolution"
		"48.0" : "Medium Resolution"
		"108.0" : "Low Resolution"
	]
]

@OverrideClass = point_camera_vertical_fov
[
	dof_enabled(boolean) { group="Depth Of Field" } : "Depth of Field Enabled" : "0"
	dof_near_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Blurry Distance" : "50"
	dof_near_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Crisp Distance" : "150"
	dof_far_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Crisp Distance" : "200"
	dof_far_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Blurry Distance" : "600"
	dof_tilt_to_ground(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Tilt Lens to Align With Ground Plane" : "0.75"
]

@PointClass base( Targetname ) global( 3dskybox ) = skybox_reference
[
	targetMapName(instance_file) : "Map Name"
	fixupNames(boolean) : "Fixup Entity Names" : 0
	worldGroupID(string) : "WorldGroupID" : "skyboxWorldGroup0"
]

@PointClass base(Targetname) iconsprite("editor/point_script.vmat") = point_script : 
    "An entity that runs TypeScript" 
[
    script(resource:vts)    : "Script path" : : "TypeScript file to use"
    script_keys(string)        : "Script keys" : : "Unknown"
]

@PointClass base(Targetname) iconsprite("editor/point_script.vmat") = client_script : 
    "An entity that runs TypeScript" 
[
    script(resource:vts)    : "Script path" : : "TypeScript file to use"
    script_keys(string)        : "Script keys" : : "Unknown"
]

@PointClass base(Targetname, Parentname, CanBeClientOnly) tags( Particles ) editormodel("models/editor/cone_helper_xyz.vmdl") helper_particle_glow() = env_particle_glow : 
	"An entity to create light glows built via the particle editor" 
[
	effect_name(particlesystem) [report] : "Particle System Name" : "particles/environment/env_light_glow_01.vpcf"
	effect_textureOverride(resource:texture) : "Texture Override" : "" : "You can replace the texture of any particle system specified above with a vtex. if empty the default particle behavior will happen."
	start_active(boolean) : "Start Active?" : 1
	scale(float) : "Scale" : 1 : "Scale multiplier of the glow. Used to remap the radius of the particle system. Written to Control Point 17 Y Value"
	colortint(color255) : "Color Tint" : "255 255 255" :"Set the light's render color (R G B). Written to Control Point 16"
	selfillumscale(float) : "Self illum Scalar" : "1" : "float value to multiply sprite self illum by. this will affect things like bloom contribution. Written to Control Point 17 Z Value"
	alphascale(float) : "Alpha Scale" : 1 : "Alpha Multiplier on particle system. Written to Control Point 17 X Value"
	cpoint0(target_destination) [ group="Advanced Properties" ] : "Parent (Control Point 0)" : : "If set, control point 0 of the effect will be at this entity's location. (Otherwise it is at the env_particle_glow origin)"
	snapshot_file(resource:vsnap) { enabled={ variable="snapshot_mesh" value="0" } group="Advanced Properties" } : "Particle Snapshot File" : "" : "Name of .vsnap (Particle Snapshot File) to be loaded and used by this particle system (e.g. 'smoke_snapshot1.vsnap')"
	snapshot_mesh(node_id) [ group="Advanced Properties" ] : "Particle Snapshot Node" : "" : "Spawns a glow particle at each mesh vertex. Id of a node in the map to be used to generate a particle snapshot, if specified Particle Snapshot File is ignored. A Particle system that is setup for snapshots must be used. eg : glow01_snapshot.vpcf"

	// Inputs
	input setcolortint(color255) : "Set the light's render color (R G B)."
	input setscale(float) : "Set the glow scale multiplier (0 - 8.0)."
	input setalphascale(float) : "Set the Alpha scale multiplier (0 - 1.0)."
	
	// Inputs
	input Start(void) : "Tell the particle system to start emitting."
	input Stop(void) : "Tell the particle system to stop emitting."
	input StopPlayEndCap(void) : "Tell the particle system to stop emitting and play its End Cap Effect."
	input DestroyImmediately(void) : "Destroy the particle system and remove all particles immediately."
	input SetControlPoint(string) : "Set a Control Point via format - CP: X Y Z"
]

@PointClass base(Targetname) = info_offscreen_panorama_texture : "Offscreen Panorama Texture"
[
	layout_file(string) [important] : "Layout File" : : "Path to a panorama xml file ie - file://{resources}/layout/custom_hint.xml"

	targets(target_destination) [important] : "Target(s)" : "" : "Entity (or entities) whose material should be overridden with this texture"
	render_attr_name(string) : "Target Render Attribute" : "" : "Attribute name to hook to the texture (Add dynamic expression with the same string in your VMAT)"

	resolution_x(integer) : "Texture Resolution (X)" : 512 : "Offscreen texture width"
	resolution_y(integer) : "Texture Resolution (Y)" : 512 : "Offscreen texture height"

	input AddCSSClass(string) : "Add a CSS class to the panel."
	input RemoveCSSClass(string) : "Remove a CSS class from the panel."
]

@PointClass base(BasePropDoorRotating) tags( PropDynamic ) model() = prop_door_rotating :
	"An entity used to place a door in the world. If two doors have the same name, they will open and close together as double doors."
[
]


//-------------------------------------------------------------------------
// Used to listen to events caled from code
//-------------------------------------------------------------------------

@PointClass base(Targetname) = logic_eventlistener :
	"An entity that can listen to events fired from code and fire " +
	"and output when it happens."
[
	EventName(string) : "Event Name" : "" : "The name of the event that you want to listen for."
	IsEnabled(choices) : "Start Enabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	TeamNum(choices) : "Team Number" : -1 : "If set, will only fire its output if the event is generated from someone of the specified team." =
	[
		-1 : "Don't care"
		2 : "Terrorists"
		3 : "Counter-Terrorists"
	]
		
	// Inputs
	input Enable(void) : "Enable the logic_eventlistener."
	input Disable(void) : "Disable the logic_eventlistener."
	
	// Outputs
	output OnEventFired(void)  : "Fired when the event has been detected."
]

//-------------------------------------------------------------------------
//
// Solid Classes
//
//-------------------------------------------------------------------------

@SolidClass base(Targetname) tags( NavMarkup ) 
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_nav_blocker : "A brush entity that can block nav areas touching its AABB." 
[
	StartDisabled(boolean) : "Start Disabled" : 0
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."
]


@SolidClass base(Targetname, EnableDisable) = func_clip_vphysics : 
	"A brush entity that's considered solid to vphysics." 
[
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator collides with me. See filter_activator_name for more explanation. Allow means 'Allow to Block' for this entity."
]



@OverrideClass = prop_static
[
	renderwithdynamic(remove_key)
	fademindist(remove_key)
	fademaxdist(remove_key)
	renderamt(remove_key)
]

@PointClass base(Targetname,Angles) = info_map_parameters :
	"Map parameters. Used to set which teams can buys, and the C4 bomb detonation radius."
[
	buying(choices) : "Teams that can buy" : 0 =
	[
		0 : "Everyone"
		1 : "Only Counter-Terrorists"
		2 : "Only Terrorists"
		3 : "Nobody"
	]

	bombradius(float) : "C4 Explosion Radius" : 500 : "Overrides the default radius of the explosion when the C4 bomb explodes. Max range is 2048"
	petpopulation(float) : "Pet Population" : 0 : "Determines the target population of pets." 
	usenormalspawnsfordm(boolean) : "Use Normal Spawns in Deathmatch?" : 0 : "Set to true if the map should use the mapper-placed spawn points instead of generating random ones."
	disableautogenerateddmspawns(boolean) : "Disable Autogenerated DM Spawns?" : 0 : "Set to true if you want to manually place info_deathmatch_spawns and not have the engine generate them."
	botmaxvisiondistance(float) : "Bot max vision distance" : "-1" : "Sets the maximum distance bots can see enemies. Default is -1, unlimited."
	
	input FireWinCondition(integer) : "Fires win conditions for the win."
	
]

@OverrideClass = prop_physics_multiplayer
[
	disableshadows(choices) [ group="Render Properties" ] : "Cast Shadows" : 2 : "Used to disable shadow casting from this entity." = 
	[
		0: "Enabled"
		1: "No Shadows"
		2: "Only Realtime Shadows"
		3: "Only Baked Shadows"
	]
]



//-------------------------------------------------------------------------
//
// Map preview classes - Can only be used in background UI maps
//
//-------------------------------------------------------------------------

@PathNodeClass base(Targetname)
	tags( Camera )
	editormodel( "models/editor/camera" )
	camera_path_node()
	= map_preview_camera_path_node
[
	ZNear(float)[ group="Frustum" ] : "ZNear" : 4 : "Distance to the near plane for preview of the frustum in hammer."
	ZFar(float)[ group="Frustum" ] : "ZFar" : 100 : "Distance to the far plane for preview of the frustum in hammer."
 	rendercolor(color255)[ group="Frustum" ] : "Color (R G B)" : "128 128 128 for preview of the frustum in hammer."
	aspectRatio(float)[ group="Frustum" ] : "Aspect Ratio" : "1.0" : "Aspect ratio of the camera for preview of the frustum in hammer. "

	FOV(float) : "Field Of View" : "90" : "This is the horizontal field of view."

	speed(float) : "Speed" : "100" : "If the path is not constant speed, this specifies the speed of this segment.  The segment is defined as the line from this node to the next node in the direction of camera travel.\nThis value is ignored if the path is constant speed."
	ease_in(float){ min="0.0" max="100.0" } : "Ease In Percent" : "0" : "Percentage of the segment used to ease the speed from the previous segment to the speed of this segment.\nIf Ease In & Ease Out total to more than 100%, their values will be normalized to total 100%.\nThis value is ignored if the path is constant speed."
	ease_out(float){ min="0.0" max="100.0" } : "Ease Out Percent" : "0" : "Percentage of the segment used to ease the speed from this segment to the speed of the next segment.\nIf Ease In & Ease Out total to more than 100%, their values will be normalized to total 100%.\nThis value is ignored if the path is constant speed."
]

@PathClass base(Targetname)
	metadata
	{
		path_node_class = "map_preview_camera_path_node"
	}
	tags( Camera )
	camera_path()
	= map_preview_camera_path : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
	ZNear(float)[ group="Frustum" ] : "ZNear" : 4 : "Distance to the near plane for preview of the frustum in hammer."
	ZFar(float)[ group="Frustum" ] : "ZFar" : 100 : "Distance to the far plane for preview of the frustum in hammer."
 	rendercolor(color255)[ group="Frustum" ] : "Color (R G B)" : "128 128 128 for preview of the frustum in hammer."
	aspectRatio(float)[ group="Frustum" ] : "Aspect Ratio" : "1.0" : "Aspect ratio of the camera."

	useVerticalFOV(boolean) : "Vertical FOV" : "0" : "Set to true if the camera should use vertical FOV (Default false)"
	constant_speed(boolean) : "Constant Speed" : "1" : "Controls the timing of the camera.  If true the duration value on the path is used, otherwise the individual time values on the nodes are used.  (Default true)"
	duration(float){ enabled={ variable="constant_speed" value="1" } } : "Constant Speed Duration" : "5" : "The amount of time in seconds the camera will take to traverse the path.  Ignored if Constant Speed is false. (Default 5)"
	loop(boolean) : "Loop" : "0" : "Set to true if the camera animation should loop when reaching the end of the path. By default, the camera animation will hold the last frame."
]

@PathClass base(Targetname)
metadata
{
path_node_class = "map_preview_camera_path_node"
}
tags( Camera )
camera_path()
= team_select_camera : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
dof_enabled(boolean) { group="Depth Of Field" } : "Depth of Field Enabled" : "0"
dof_near_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Blurry Distance" : "50"
dof_near_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Crisp Distance" : "150"
dof_far_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Crisp Distance" : "200"
dof_far_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Blurry Distance" : "600"
dof_tilt_to_ground(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Tilt Lens to Align With Ground Plane" : "0.75"
    variant(integer): "Variant lol"
useVerticalFOV(boolean) : "Vertical FOV" : "0" : "Set to true if the camera should use vertical FOV (Default false)"
constant_speed(boolean) : "Constant Speed" : "1" : "Controls the timing of the camera.  If true the duration value on the path is used, otherwise the individual time values on the nodes are used.  (Default true)"
duration(float){ enabled={ variable="constant_speed" value="1" } } : "Constant Speed Duration" : "5" : "The amount of time in seconds the camera will take to traverse the path.  Ignored if Constant Speed is false. (Default 5)"
loop(boolean) : "Loop" : "0" : "Set to true if the camera animation should loop when reaching the end of the path. By default, the camera animation will hold the last frame."
]

@PathClass base(Targetname)
metadata
{
path_node_class = "map_preview_camera_path_node"
}
tags( Camera )
camera_path()
= terrorist_team_intro_camera : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
variant(integer): "Variant lol"
dof_enabled(boolean) { group="Depth Of Field" } : "Depth of Field Enabled" : "0"
dof_near_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Blurry Distance" : "50"
dof_near_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Crisp Distance" : "150"
dof_far_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Crisp Distance" : "200"
dof_far_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Blurry Distance" : "600"
dof_tilt_to_ground(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Tilt Lens to Align With Ground Plane" : "0.75"
useVerticalFOV(boolean) : "Vertical FOV" : "0" : "Set to true if the camera should use vertical FOV (Default false)"
constant_speed(boolean) : "Constant Speed" : "1" : "Controls the timing of the camera.  If true the duration value on the path is used, otherwise the individual time values on the nodes are used.  (Default true)"
duration(float){ enabled={ variable="constant_speed" value="1" } } : "Constant Speed Duration" : "5" : "The amount of time in seconds the camera will take to traverse the path.  Ignored if Constant Speed is false. (Default 5)"
loop(boolean) : "Loop" : "0" : "Set to true if the camera animation should loop when reaching the end of the path. By default, the camera animation will hold the last frame."
]

@PathClass base(Targetname)
metadata
{
path_node_class = "map_preview_camera_path_node"
}
tags( Camera )
camera_path()
= counterterrorist_team_intro_camera : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
variant(integer): "Variant lol"
dof_enabled(boolean) { group="Depth Of Field" } : "Depth of Field Enabled" : "0"
dof_near_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Blurry Distance" : "50"
dof_near_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Near Crisp Distance" : "150"
dof_far_crisp(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Crisp Distance" : "200"
dof_far_blurry(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Far Blurry Distance" : "600"
dof_tilt_to_ground(float) { enabled={ variable="dof_enabled" value="1" } group="Depth Of Field" } : "Depth of Field Tilt Lens to Align With Ground Plane" : "0.75"
useVerticalFOV(boolean) : "Vertical FOV" : "0" : "Set to true if the camera should use vertical FOV (Default false)"
constant_speed(boolean) : "Constant Speed" : "1" : "Controls the timing of the camera.  If true the duration value on the path is used, otherwise the individual time values on the nodes are used.  (Default true)"
duration(float){ enabled={ variable="constant_speed" value="1" } } : "Constant Speed Duration" : "5" : "The amount of time in seconds the camera will take to traverse the path.  Ignored if Constant Speed is false. (Default 5)"
loop(boolean) : "Loop" : "0" : "Set to true if the camera animation should loop when reaching the end of the path. By default, the camera animation will hold the last frame."
]


@PointClass base(RenderFields) model() = team_select_counterterrorist :
"A model entity that can be used for characters in ui maps."
[
    variant(integer): "Variant lol"
ordinal(integer): "Ordinal lol"
model(studio) [report]: "World Model" : : "Overriden by game code."
    team_preview_variant(string): "Team preview variant" : : "Test'"
targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
character_mode(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Character Mode" : "" : "UI Character animation mode.  Set by game code."
ct_true(string): "CT or T" : : "true if CT, false if T'"
    weapon(string): "What weapon?" : : "Test'"
team_preview_position(string)  : "Team preview position" : : "Test'"
]

@PointClass base(RenderFields) model() = team_select_terrorist :
"A model entity that can be used for characters in ui maps."
[
    variant(integer): "Variant lol"
ordinal(integer): "Ordinal lol"
model(studio) [report]: "World Model" : : "Overriden by game code."
    team_preview_variant(string): "Team preview variant" : : "Test'"
targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
character_mode(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Character Mode" : "" : "UI Character animation mode.  Set by game code."
ct_true(string): "CT or T" : : "true if CT, false if T'"
    weapon(string): "What weapon?" : : "Test'"
team_preview_position(string)  : "Team preview position" : : "Test'"
]

@PointClass base(RenderFields) model() = team_intro_terrorist :
"A model entity that can be used for characters in ui maps."
[
    variant(integer): "Variant lol"
ordinal(integer): "Ordinal lol"
model(studio) [report]: "World Model" : : "Overriden by game code."
    team_preview_variant(string): "Team preview variant" : : "Test'"
targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
character_mode(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Character Mode" : "" : "UI Character animation mode.  Set by game code."
ct_true(string): "CT or T" : : "true if CT, false if T'"
    weapon(string): "What weapon?" : : "Test'"
team_preview_position(string)  : "Team preview position" : : "Test'"
]

@PointClass base(RenderFields) model() = team_intro_counterterrorist :
"A model entity that can be used for characters in ui maps."
[
    variant(integer): "Variant lol"
ordinal(integer): "Ordinal lol"
model(studio) [report]: "World Model" : : "Overriden by game code."
 team_preview_variant(string): "Team preview variant" : : "Test'"
targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
character_mode(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Character Mode" : "" : "UI Character animation mode.  Set by game code."
ct_true(string): "CT or T" : : "true if CT, false if T'"
    weapon(string): "What weapon?" : : "Test'"
team_preview_position(string)  : "Team preview position" : : "Test'"
]

@PointClass base(RenderFields) model() = csgo_player_previewmodel :
	"A model entity that can be used for characters in ui maps."
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	model(studio) [report]: "World Model" : : "Overriden by game code."
	animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
	character_mode(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Character Mode" : "" : "UI Character animation mode.  Set by game code."
	CT_true(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Counter Terrorist" : "" : "True CT, false for terrorist.  This value is overridden in game to match the model."
	weapon_type(animgraph_enum)   { enabled={ function="ModelHasAnimGraph" } } : "Weapon type" : "" : "Major weapon type.  Overridden in game to match equipped weapon."
	weapon_type_pistol(animgraph_enum)   { enabled={ function="ModelHasAnimGraph" } } : "Pistol type" : "" : "Minor weapon type only applies if Weapon Type == Pistol. Overridden in game to match equipped weapon."
	weapon_type_rifle(animgraph_enum)   { enabled={ function="ModelHasAnimGraph" } } : "Rifle type" : "" : "Minor weapon type only applies if Weapon Type == Rifle. Overridden in game to match equipped weapon."
	end_of_match_celebration(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "End Of Match celebration type" : "" : "Only applies if Character Mode == end_of_match. Overridden in game by End Of Match dialog."
	team_preview_position(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Team preview position" : "" : "For Character Mode team_select and team_intro. Overridden in game."
]

@PointClass base(Studiomodel, RenderFields) model() = csgo_item_previewmodel :
	"A model entity that can be used for items (weapons/props) in ui maps."
[
	targetname(target_source) : "Name" : "" : "The name that other entities refer to this entity by."
	model(studio) [report]:  "World Model" : : "Overriden by game code."
	animgraph(animgraph) { enabled={ function="ModelHasAnimGraph" } } : "Animgraph" : "" : "Specify animgraph resource.  Overridden if the model is changed by game code."
	weapon_state(animgraph_enum)  { enabled={ function="ModelHasAnimGraph" } } : "Weapon State" : "" : "Weapon specific animgraph. Should be set to 'inspect' for weapon preview.  Set by game code for weapons."
	model_scale(float)  : "Model Scale" : "" : "Initial scale for the model."
	DefaultAnim(sequence) { enabled={ function="NotUsingAnimGraph" } } : "Default Animation" : "" : "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation. This setting is ignored for models with an animgraph when Use Animgraph is enabled."
]

@SolidClass base(Targetname, Parentname, RenderFields) drawangles_local{ angles_key = "movedir" } = func_conveyor : 
	"A brush entity with a moving surface that moves linearly in a given direction"
[
	conveyor_models(target_destination) : "Models" : "" : "Name of the conveyor models that will animate along with the conveyor."
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction conveyor moves."
	speed(float) : "Conveyor Speed, , in inches / second." : "100"
	transition_duration(float) : "Transition Duration (seconds)" : "0" : "How long it will take to transition to the new speed."


	// Inputs
	input ToggleDirection(void) : "Toggle the direction"
	input SetSpeed(float) : "Set the speed in inches per second,"
	input SetTransitionDuration(float) : "Set the duration in seconds to transition to the new speed,"
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/team_select" }
		]
	}
	model("models/editor/team_select") 
	= team_select : "In-map team select position." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/terrorist_team_intro" }
		]
	}
	model("models/editor/terrorist_team_intro") 
	= terrorist_team_intro : "In-map terrorist team intro variant #1." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/terrorist_team_intro_variant2" }
		]
	}
	model("models/editor/terrorist_team_intro_variant2")
	= terrorist_team_intro_variant2 : "In-map terrorist team intro variant #2." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/counterterrorist_team_intro" }
		]
	}
	model("models/editor/counterterrorist_team_intro") 
	= counterterrorist_team_intro : "In-map counter-terrorist team intro variant #1." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/counterterrorist_team_intro_variant2" }
		]
	}
	model("models/editor/counterterrorist_team_intro_variant2")
	= counterterrorist_team_intro_variant2 : "In-map counter-terrorist team intro variant #2." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/terrorist_wingman_intro" }
		]
	}
	model("models/editor/terrorist_wingman_intro") 
	= terrorist_wingman_intro : "In-map terrorist wingman intro." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/counterterrorist_wingman_intro" }
		]
	}
	model("models/editor/counterterrorist_wingman_intro")
	= counterterrorist_wingman_intro : "In-map counter-terrorist wingman intro." 
[
]

@PointClass base(Targetname) 
	metadata
	{
		class_game_keys =
		[
			{ key = "isPointPrefab" value = true },
			{ key = "targetMapName" value = "prefabs/misc/end_of_match" }
		]
	}
	model("models/editor/end_of_match") = end_of_match : "In-map end-of-match position." 
[
]

// Server-side ropes cause hitches every time a player joins. Use path_particle_rope_clientside instead.
@exclude path_particle_rope

@SolidClass base( Targetname, Parentname )
	metadata
	{
		render_as_world_but_physics_as_entity = true
	}
= func_water
[
]

@PointClass = cs_minimap_boundary:
	"One of two corners needed to define the minimap boundaries (extend to support multilevel maps)."
[
]

@PointClass base(Targetname) = game_money : 
	"An entity that awards money to a specific team." 
[
	Money(integer)		: "Amount of money to add (+/-)" : 1000
	AwardText(string)	: "Award Text" : : "The text that will print in the chat next to the award amount.  Will look like this:	'1000: <Award Text>'"
	
	// Inputs
	input SetMoneyAmount(void) : "Set the money value that will be awarded. (without awarding it)"
	input AddTeamMoneyTerrorist(void) : "Add money to players on team TERRORIST."
	input AddTeamMoneyCT(void) : "Add money to players on team COUNTER TERRORIST."
	input AddMoneyPlayer(void) : "Add money directly to the player activating this entity. (no chat description)"
	input SpendMoneyFromPlayer(void) : "If the player has [money amount] or more, take [money amount] away."
	
	output OnMoneySpent(void) : "Fires when input SpendMoneyFromPlayer succeeded."
	output OnMoneySpentFail(void) : "Fires when input SpendMoneyFromPlayer failed. (Player didn't have enough money)"
]


//===================== Test Citadel fgd by dirtkiller23 ======================
//
// TEST FGD, ЦЫГАНСКИЕ ФОКУСЫ
//
//==================================================================================================

@PointClass base(Targetname, Angles) studio("models/editor/playerstart.vmdl") 
	metadata
	{
	entity_tool_name = "Citadel spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "This entity marks the spawn point(Citadel)"
	}
	= info_team_spawn :
	"This entity marks the start point (citadel). One of these needs to be placed for each team member. " +
	"20 start points is typical. Should be placed at least 128 units away from each other and surrounding walls."
[
	lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        3 : "Orange"
        4 : "Blue"        
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
	teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
]

@PointClass base(Targetname, Angles) studio("models/props_gameplay/wooden_crate_03/wooden_crate_03.vmdl") = citadel_breakable_prop :
	"Breakable props that contain pickups."

[

	subclass_name(choices) : "Breakable Prop" : "citadel_breakable_wooden_crate_03" : "Sets the type of prop." =
	[
		"citadel_breakable_wooden_crate_03" : "Wooden Crate 03"
		"citadel_breakable_wooden_crate_02" : "Wooden Crate 02"
		"citadel_breakable_item_container" : "Item Container"
		"citadel_breakable_jar_01" : "Jar 01"
		"citadel_breakable_prop_vase" : "Vase"
		
	]
	scales(vector) : "Scales" : "1 1 1"

]

@PointClass = item_crate_spawn : "Crate spawnpoint"
[
    early_spawn(boolean) : "Spawn early?"
    loot_type(string) : "Loot type"
    objective_position(string) : "Objective position"
]

@PointClass = citadel_minimap_boundary : ""
[
]

@PointClass base(Targetname) = citadel_point_talker : "Point talker entity for Citadel."
[
]

@PointClass base(Targetname) = destroyable_building : "Final shrine building?"
[
    BackdoorProtectionTrigger(string) : ""
    building_health(integer) : "Set building health"
    disableshadows(string) : "Disable shadows"
    final(boolean) : "Set the building type to final (1)"
    lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"        
        3 : "Orange"
        4 : "Blue"       
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    model(studio) : "Model" : "Set model"
    skin(materialgroup) [ group="Render Properties" ] : "Skin" : "default" : "Some models have multiple versions of their textures, called skins."
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]

    output OnDestroyed(void) : ""
]

@PointClass base(Targetname, Angles) = citadel_final_objective_proxy : "Final objective"
[
    final_objective(target_destination) : "Final objective entity" : "" : "Select the final objective entity."
    sub_objective_1(target_destination) : "Objective 1" : "" : "Select objective 1."
    sub_objective_2(target_destination) : "Objective 2" : "" : "Select objective 2."
    sub_objective_3(target_destination) : "Objective 3" : "" : "Select objective 3."
    sub_objective_4(target_destination) : "Objective 4" : "" : "Select objective 4."
    sub_objective_lane_1(choices) : "Lane Color 1" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"        
        3 : "Orange"
        4 : "Blue"       
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    sub_objective_lane_2(choices) : "Lane Color 2" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"        
        3 : "Orange"
        4 : "Blue"       
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    sub_objective_lane_3(choices) : "Lane Color 3" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"        
        3 : "Orange"
        4 : "Blue"       
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    sub_objective_lane_4(choices) : "Lane Color 4" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"        
        3 : "Orange"
        4 : "Blue"       
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
	
    output BecomeActive(void) : ""
    output FinalExposed(void) : ""
    output FinalShielded(void) : ""
    output SubObjective1Destroyed(void) : ""
    output SubObjective1Revitilized(void) : ""
    output SubObjective2Destroyed(void) : ""
    output SubObjective2Revitilized(void) : ""
]

@PointClass base(Targetname, Angles) studio("models/editor/ground_node.vmdl") = info_cover_point :
	"Spawn protection sentry turret."

[

	groupid(integer) : "Cover Group ID" : 0 : "Number of the info_cover_point group it belongs to."
	visionradius(integer) : "Vision Radius" : 0 : "Distance the cover point can see in units?"
	AllowOffNav(boolean) : "Allow Off Nav?" : 0
	AutoAdjustDirection(choices) : "Auto Adjust Direction?" : "" =
	[
		"" : "Maybe?"
		0 : "No"
	]
	
]

@PointClass base(Targetname, Angles) studio("models/editor/neutral_camp_marker.vmdl") = info_neutral_trooper_camp :
	"Spawn protection sentry turret."

[
	CampName(string) : "Camp Name" : "" : "Name of the neutral trooper camp."
	
	ENeutralTrooperType(choices) : "Neutral Trooper Type" : "" =
	[
		"" : "?"
		1 : "Level 1"
		2 : "Level 2"
		3 : "Level 3"
		5 : "Level 5"
		12 : "Level 12"
	]
	
		subclass_name(choices) : "Trooper Subclass" : "neutral_camp_medium" =
	[
		"neutral_camp_medium" : "Medium"
		"neutral_camp_strong" : "Strong"
		"neutral_camp_vaults" : "Vaults"
		"neutral_camp_midboss" : "Midboss"
	]
	
	InitialSpawnDelayInSeconds(string) : "Initial Spawn Delay" : "120" : "Initial Spawn Delay In Seconds"
	
	SpawnIntervalInSeconds(string) : "Spawn Interval" : "120" : "Spawn Interval In Seconds."
	

]


@PointClass base(Targetname, Angles) studio("models/npc/neutral_drain_creature/neutral_drain_creature.vmdl") = info_neutral_trooper_spawn :
	"Spawn point for Neutral Troopers."

[
	CampName(target_destination) : "Camp Name" : "" : "Name of the neutral trooper camp this entity belongs to."
	
	ENeutralTrooperType(choices) : "Neutral Trooper Type" : 1 =
	[
		1 : "1"
		2 : "2"
		3 : "3"
		5 : "5"
		12 : "12"
	]
	
		teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
	[
		2 : "Team Amber"
		3 : "Team Sapphire"
		4 : "Team Neutral"
	]
	

	CoverGroupID(integer) : "Cover Group ID" : 0 : "Number of the info_cover_point group it belongs to."
	
	Grenadier(boolean) : "Grenadier?" : 0 : "Unused?"
	Super(boolean) : "Super?" : 0 : "Unused?"
	HateCrateAttacker(boolean) : "Hates Crate Attackers?" : 1 : "Used for vault protectors."
	model(studio) : "Override trooper model" : "" : "Select a model to override the model used for enemies spawned at this spawn point." 
	modelscale(integer) : "Model Scale" : 1
]


@PointClass base(Targetname, Angles) studio("models/npc/trooper/trooper_melee.vmdl") = info_trooper_spawn :
	"This entity marks the start point for troopers. One of these needs to be placed for each trooper in a lane. " +
	"5 start points is typical per lane. Should be placed at least 128 units away from each other and surrounding walls"

[

	TrooperLevel(choices) : "Trooper Level" : 4 : "Sets the trooper's level. Normal matches have them set to level 4 by default." =
	[
		1 : "Level 1"
		2 : "Level 2"
		3 : "Level 3"
		4 : "Level 4"
	]
	
	teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
	[
		2 : "Team Amber"
		3 : "Team Sapphire"
		4 : "Team Neutral"
	]
	lanenum(choices) : "Lane Color" : 0 : "Sets the lane that the trooper will spawn for." =
	[
		0 : "None"
		1 : "Yellow"
		2 : "???"
		3 : "Orange"
		4 : "Blue"
		5 : "???"
		6 : "Purple"
	]
]

@PointClass base(Targetname, Parentname, PlayerClass) editormodel("models/editor/playerstart.vmdl", fixedbounds) = info_teleport_location : 
	"An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead."
[
    lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        2 : "???"
        3 : "Orange"
        4 : "Blue"
        5 : "???"
        6 : "Purple"
    ]
    Objective(string) : "Objective"
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
]

@PointClass base(Targetname, Angles) studio("models/npc/trooper/trooper_boss.vmdl") = info_super_trooper_spawn :
	"This entity marks the start point for towers. One of these needs to be placed for each trooper in a lane. " +
	"5 start points is typical per lane. Should be placed at least 128 units away from each other and surrounding walls"

[

	
	teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
	[
		2 : "Team Amber"
		3 : "Team Sapphire"
		4 : "Team Neutral"
	]
	
	lanenum(choices) : "Lane Color" : 0 : "Sets the lane that the trooper will spawn on." =
	[
		0 : "None"
		1 : "Yellow"
		2 : "???"
		3 : "Orange"
		4 : "Blue"
		5 : "???"
		6 : "Purple"
	]
	
	SecondaryBoss(boolean) : "Is secondary boss? (Not yet used.)" : 0
	
	ReinforcementsOnly(boolean) : "Is reinforcement?" : 0
	
	BossName(string) : "Name of the boss." : "" : "Name that the boss will be referred to."
	
	CoverGroupID(integer) : "Cover Group ID" : 0 : "Number of the info_cover_point group it belongs to."
	
]

@PointClass = npc_barrack_boss : "Barrack boss"
[
    BackdoorProtectionTrigger(string) : "What entity is the backdoor protection trigger"
    CoverGroupID(integer) : "Cover group id"
    lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        2 : "???"
        3 : "Orange"
        4 : "Blue"
        5 : "???"
        6 : "Purple"
    ]
    LaneSide(string) : "Lane side"
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
]

@PointClass base(Targetname, Angles) studio("models/npc/gargoyle/neutral_gargoyle.vmdl") = npc_base_defense_sentry : "Spawn protection sentry turret."
[
    ability_weapon(string) : "Ability Weapon." : "spawn_defense_sentry" : "Type of projectile that will be shot."
    health(float) : "Health" : "1000.0"
	attack_cone(float) : "Attack Cone" : "180.0"
    renderamt(integer) [ group="Render Properties" ] : "Alpha" : 255 : "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque." 
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
    sentry_level(string) : "Sentry Level." : "1" : "Level of the sentry."
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
	scales(vector) : "Scales" : "1 1 1"
    unit_status_offset(vector) : "Unit Status Offset" : "0 0 60"
]

@PointClass base(Targetname) = npc_boss_tier2 : "Tier2 boss"
[
    BossName(string) : "Boss name"
    CoverGroupID(integer) : "Group ID"
    lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        2 : "???"
        3 : "Orange"
        4 : "Blue"
        5 : "???"
        6 : "Purple"
    ]
    subclass_name(choices) : "Tier2 Bosses" : "npc_boss_tier2_weak" : "Sets the type of boss." =
	[
		"npc_boss_tier2_weak" : "Weak tier 2 boss"
		"alt_npc_boss_tier2_weak" : "Alternate weak tier 2 boss"
		"npc_boss_tier2" : "Tier 2 Boss"
		"alt_npc_boss_tier2" : "Alternate tier 2 boss"
		
	]
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
]

@PointClass base(Targetname) = npc_boss_tier3 : "Tier3 boss"
[
    BackdoorProtectionTrigger(target_destination) : "What entity is the backdoor protection trigger"
    BossName(string) : "Boss name"
    CoverGroupID(integer) : "Group ID"
    dying_cover_id(integer) : "Dying cover ID"
    lanenum(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        2 : "???"
        3 : "Orange"
        4 : "Blue"
        5 : "???"
        6 : "Purple"
    ]
    subclass_name(choices) : "Tier3 Bosses" : "npc_boss_tier3" : "Sets the type of boss." =
	[
		"npc_boss_tier3" : "Tier 3 boss (Patron)"
        "alt_npc_boss_tier3" : "Alt tier 3 boss (Patron)"		
		
	]
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    vulnerable_cover_id(integer) : "Vulnerable cover id"

    output OnBossKilled(void) : ""
]

@PointClass base( Targetname ) tags( Logic ) iconsprite("editor/logic_auto.vmat")
	metadata
	{
		entity_tool_name = "Logic Auto Citadel"
		entity_tool_group = "Logic"
		entity_tool_tip = "Fire an output on map spawn"
	}
= logic_auto_citadel : 
	"Fires outputs when a map spawns. " +
	"If 'Remove on fire' flag is set the logic_auto is deleted after firing. " +
	"It can be set to check a global state before firing. This allows you to only fire events based on "+
	"what took place in a previous map."
[
	spawnflags(Flags) =
	[
		1 : "Remove on fire" : 1
	]	
	
	// Outputs
	output OnMapSpawn(void) : "Fired when the map is loaded for any reason."
	output OnNewGame(void) : "Fired when the map is loaded to start a new game."
	output OnLoadGame(void) : "Fired when the map is loaded from a saved game."
	output OnMapTransition(void) : "Fired when the map is loaded due to a level transition."
	output OnBackgroundMap(void) : "Fired when the map is loaded as a background to the main menu."
	output OnMultiNewMap(void) : "Fired only in multiplayer, when a new map is loaded."
	output OnMultiNewRound(void) : "Fired only in multiplayer, when a new round is started. Only fired in multiplayer games that use round-based gameplay."
	output OnDemoMapSpawn(void) : "Fired when the map is loaded in Demo Mode."
	output OnVREnabled(void) : "Fired when the map is loaded with a VR HMD active."
	output OnVRNotEnabled(void) : "Fired when the map is loaded without a VR HMD active."
]

@SolidClass = func_regenerate : "Return of func_regenerate from tf2"
[
    model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = func_conditional_collidable : ""
[
    interactas(string) : "Interact as"
    interactwith(string) : "Interact with"
    model(studio) : "Model" : "Set associated model"
]

@SolidClass base(Targetname) = trigger_item_shop : "Item shop trigger"
[
    AudioOffset(string) : "Audio offset"
    model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = trigger_item_shop_safe_zone : "Item shop trigger safe zone"
[
     AudioOffset(string) : "Audio offset"
    model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"

    output OnContested(void) : "If contested"
    output OnNotContested(void) : "If not contested"
]

@SolidClass base(Targetname) = trigger_modifier : "Trigger modifier"
[
    model(studio) : "Model" : "Set associated model"
    modifier_name(string) : "Modifier name"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = trigger_neutral_shield : "Neutral shield trigger"
[
    model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = trigger_ping_location : "Ping location trigger"
[
    ping_location(target_destination) : "Ping location"
    model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = trigger_team_base : "Team base trigger"
[
   model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Targetname) = trigger_trooper_detector : "Trooper detector trigger"
[
   model(studio) : "Model" : "Set associated model"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@SolidClass base(Trigger) = citadel_trigger_teleport : 
	"A trigger volume that teleports entities that touch it (Citadel ver). Entities are teleported to the Remote Destination, and have their angles "+
	"set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target "+
	"by their initial offset from the landmark, and their angles are left alone."
[
	exitpoint(target_destination) : "Remote Destination" : : "The entity specifying the point to which entities should be teleported."
	model(studio) : "Model" : "Set model"
	StartDisabled(boolean) : "Start Disabled" : 0
	spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]

	uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"	
	teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
	output OnTeleport(void) : "OnTeleport output"
]

@SolidClass base(Targetname) = citadel_zap_trigger : "Zap trigger"
[
    model(studio) : "Model" : "Set model"
    PercentMaxHealthDamage(float) : "Set max health damage by percent"
    ShootAfterEnteringTime(float) : "Shoot after entering trigger"
    ShootFromEntity(target_destination) : "Shoot from entity"
    spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]	
    StartDisabled(boolean) : "Start Disabled" : 0
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
    TimeBetweenShots(float) : "Time between shots"
    uselocaloffset(boolean) : "Use Local offset" : 0 : "Rotate around landmark by relative landmark orientations"
]

@PointClass = info_assigned_lane_particle : "Particle to the assigned lane"
[
   lane_number(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"       
        3 : "Orange"
        4 : "Blue"        
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
    teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
]


@PathNodeClass base(Targetname)
	tags( Camera )
	editormodel( "models/editor/camera" )
	camera_path_node() studio("models/props_gameplay/zip_tower_hover.vmdl")
	= citadel_zipline_path_node
[
	teamnumber(choices) : "Team Number" : 4 : "Sets the team that the trooper belongs to." =
    [
        2 : "Team Amber"
        3 : "Team Sapphire"
        4 : "Team Neutral"
    ]
	corner_node(string)  : "Corner node" : 0
	enabled(boolean) : "Enable" : 0
	disable_zipping_to(boolean)  : "Disable zipping to" : 0
	capturable(boolean)  : "Capturable" : 0
	
]

@PathClass base(Targetname)
	metadata
	{
		path_node_class = "citadel_zipline_path_node"
	}
	tags( Camera )
	camera_path()
	= citadel_zipline_path  : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
    lane_number(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"       
        3 : "Orange"
        4 : "Blue"        
        6 : "Purple"
		2 : "???"
		5 : "???"
    ]
	start_active(boolean)  : "Start active" : 0
	max_simulation_time(float)  : "Max simulation time" : : "Test'"
	particle_spacing(float)  : "Particle spacing" : : "Test'"
	slack(float)  : "Slack" : : "Test'"
	radius(float)  : "Radius" : : "Test'"
	static_collision(boolean)  : "Static collision" : 0
	color_tint(color255) : "Color (R G B)" : "Lane number"
	effect_name(particlesystem) [report] : "Particle System Name" : "particles/entity/path_particle_cable_default.vpcf"
]

@PathClass base(Targetname)
	metadata
	{
		path_node_class = "citadel_zipline_path_node"
	}
	tags( Camera )
	camera_path()
	= lane_marker_path : "An editable path which controls an animated camera. Can only be used in background UI maps"
[
    lane_number(choices) : "Lane Color" : 0 : "Lane number" =
    [
        0 : "None"
        1 : "Yellow"
        2 : "???"
        3 : "Orange"
        4 : "Blue"
        5 : "???"
        6 : "Purple"
    ]
	LaneSlot(string)  : "Lane slot" : : "Test'"
]




@FilterClass base(BaseFilter) iconsprite("editor/filter_name.vmat") = filter_activator_team :
	"A filter that filters by the name of the activator."
[
	filtername(target_destination) : "Filter Name" : : "The name to filter by. If the filter mode is Allow, only entities whose "+
		"name matches the given string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose name matches the string will pass the filter."
	filterteam(choices) : "Team" : 0 : "Team" =
	[
		0 : "Any"
		2 : "Team Amber"
		3 : "Team Sapphire"
		4 : "Team Neutral"
	]
	negated(choices) : "Negated?" : 0 : "Only allow entities that do not achieve the criteria." =
	[
		0 : "No"
		1 : "Yes"
	]
]
